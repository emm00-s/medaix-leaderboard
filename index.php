<?php
/******************************************************************
 * LimeSurvey — Live Leaderboard
 * --------------------------------------------------------------
 * Version: 2.2.1 (PHP 7.3+ compatible due to JSON_THROW_ON_ERROR)
 * Date   : 2025-05-09
 *
 * • Retrieves survey results through the RemoteControl 2 API
 * • Decodes the Base64-encoded JSON into a PHP array
 * • Displays a real-time leaderboard with a client-side filter
 * • Uses an external configuration file (config.php) generated by entrypoint.sh on server
 ******************************************************************/

// 1. INCLUDE CONFIGURATION FILE ------------------------------------------------
// This file is expected to be generated by entrypoint.sh on the server (e.g., Render)
if (file_exists(__DIR__ . '/config.php')) {
    require_once __DIR__ . '/config.php';
} else {
    http_response_code(500);
    error_log("Critical Error: Configuration file 'config.php' not found. It should be generated by the entrypoint script.");
    exit('Server configuration error. Unable to load settings. Please contact the administrator.');
}

// 2. VERIFY REQUIRED CONSTANTS --------------------------------------------------
$required_constants = [
    'LIMESURVEY_API_URL', 'LIMESURVEY_USERNAME', 'LIMESURVEY_PASSWORD',
    'LIMESURVEY_SURVEY_ID', 'COLUMN_NICKNAME', 'COLUMN_SCORE'
];
foreach ($required_constants as $constant) {
    if (!defined($constant) || (is_string(constant($constant)) && trim(constant($constant)) === '' && $constant !== 'LIMESURVEY_PASSWORD') ) { // Allow empty password if specifically set, though not typical
        // For survey ID, ensure it's not zero if it's expected to be a positive integer.
        if ($constant === 'LIMESURVEY_SURVEY_ID' && (!is_numeric(constant($constant)) || (int)constant($constant) <= 0) ) {
             http_response_code(500);
             error_log("Critical Error: Configuration constant '$constant' is not a valid positive integer in 'config.php'. Value: " . (constant($constant) ?? 'NOT SET'));
             exit('Server configuration error. Invalid setting for: ' . htmlspecialchars($constant) . '. Please contact the administrator.');
        } elseif ($constant !== 'LIMESURVEY_SURVEY_ID') {
             http_response_code(500);
             error_log("Critical Error: Configuration constant '$constant' is not defined or is empty in 'config.php'.");
             exit('Server configuration error. Missing or empty setting: ' . htmlspecialchars($constant) . '. Please contact the administrator.');
        }
    }
}

// -----------------------------------------------------------------------------
// INITIAL SETUP
// -----------------------------------------------------------------------------
$errorMessage = null;
$entries      = [];

/**
 * Executes a JSON-RPC request against the LimeSurvey API.
 *
 * @param string $apiUrl  LimeSurvey API endpoint.
 * @param array  $payload JSON-RPC payload.
 * @return array          Decoded response.
 * @throws RuntimeException          For cURL/HTTP/API errors.
 * @throws InvalidArgumentException For invalid URL.
 */
function call_limesurvey_api(string $apiUrl, array $payload): array
{
    if (!filter_var($apiUrl, FILTER_VALIDATE_URL)) {
        throw new InvalidArgumentException('Invalid API URL supplied: ' . htmlspecialchars($apiUrl));
    }

    $payload = array_merge([
        'jsonrpc' => '2.0',
        'id'      => random_int(1, 1000000), // random_int() is PHP 7.0+
    ], $payload);

    $ch = curl_init($apiUrl);
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST           => true,
        CURLOPT_POSTFIELDS     => json_encode($payload),
        CURLOPT_HTTPHEADER     => ['Content-Type: application/json', 'Accept: application/json'],
        CURLOPT_SSL_VERIFYPEER => true, // Recommended for production
        CURLOPT_TIMEOUT        => 25,   // Max execution time for the request
        CURLOPT_CONNECTTIMEOUT => 15,   // Max time to connect to server
    ]);

    $rawResponse      = curl_exec($ch);
    $curlErrorNumber  = curl_errno($ch);
    $curlErrorMessage = curl_error($ch);
    $httpStatusCode   = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($curlErrorNumber) {
        throw new RuntimeException('cURL error (' . $curlErrorNumber . '): ' . htmlspecialchars($curlErrorMessage));
    }
    if ($httpStatusCode !== 200) {
        throw new RuntimeException('HTTP server error: Status ' . $httpStatusCode . '. Response: ' . htmlspecialchars(substr($rawResponse ?: '', 0, 500)));
    }
    if ($rawResponse === false || $rawResponse === '') {
        throw new RuntimeException('Empty or invalid API response received.');
    }

    $response = json_decode($rawResponse, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        throw new RuntimeException('Failed to decode JSON response: ' . json_last_error_msg());
    }
    if (isset($response['error'])) {
        $apiError = is_array($response['error']) ? ($response['error']['message'] ?? json_encode($response['error'])) : $response['error'];
        throw new RuntimeException('LimeSurvey API error: ' . htmlspecialchars($apiError));
    }

    return $response;
}

try {
    // -------------------------------------------------------------------------
    // 3. AUTHENTICATION
    // -------------------------------------------------------------------------
    $loginResponse = call_limesurvey_api(LIMESURVEY_API_URL, [
        'method' => 'get_session_key',
        'params' => [LIMESURVEY_USERNAME, LIMESURVEY_PASSWORD],
    ]);
    $sessionKey = $loginResponse['result'] ?? null;
    if (!$sessionKey) {
        throw new RuntimeException('Unable to obtain session key. Check your credentials, API URL and user permissions in config.php (or environment variables).');
    }

    try {
        // ---------------------------------------------------------------------
        // 4. EXPORT RESPONSES
        // ---------------------------------------------------------------------
        $fieldsToExport = array_unique(array_filter([COLUMN_NICKNAME, COLUMN_SCORE]));
        if (empty($fieldsToExport)) {
            throw new RuntimeException('Configuration error: COLUMN_NICKNAME and COLUMN_SCORE are not defined or are empty.');
        }

        $exportResponse = call_limesurvey_api(LIMESURVEY_API_URL, [
            'method' => 'export_responses',
            'params' => [
                $sessionKey,                // 1 Session Key
                LIMESURVEY_SURVEY_ID,       // 2 Survey ID
                'json',                     // 3 Document type
                null,                       // 4 Language code (all)
                'all',                      // 5 Completion status ('all', 'complete', 'incomplete')
                'code',                     // 6 Heading type ('code', 'full', 'abbreviated')
                'long',                     // 7 Response type ('long', 'short')
                null,                       // 8 From response id
                null,                       // 9 To response id
                $fieldsToExport,            // 10 Fields to export
            ],
        ]);

        // ---------------------------------------------------------------------
        // 5. DECODE DATA
        // ---------------------------------------------------------------------
        if (!isset($exportResponse['result']) || $exportResponse['result'] === null) {
            throw new RuntimeException('API response for export_responses is missing the "result" field or it is null.');
        }

        if (!is_string($exportResponse['result'])) {
            $apiDump = json_encode($exportResponse['result']);
            throw new RuntimeException('Unexpected result type from LimeSurvey API (expected base64 string, got ' . gettype($exportResponse['result']) . "). Payload: " . substr($apiDump, 0, 300));
        }

        $base64EncodedData = $exportResponse['result'];

        // Decode the base64-encoded export
        $jsonData = base64_decode($base64EncodedData, true); // CORRECTED LINE
        if ($jsonData === false) {
            throw new RuntimeException('Failed to Base64-decode the response data from LimeSurvey.');
        }

        // JSON_THROW_ON_ERROR requires PHP 7.3+
        $responseData = json_decode($jsonData, true, 512, JSON_THROW_ON_ERROR);
        $rawEntriesData = [];

        if (isset($responseData['responses']) && is_array($responseData['responses'])) {
            // Standard nested structure: { "responses": [ { "id": "1", "col": "val" }, ... ] }
            // Or sometimes: { "responses": [ { "1": { "col": "val" } }, ... ] } (where "1" is response ID)
            foreach ($responseData['responses'] as $responseSet) { // $responseSet can be the record itself or an array indexed by record ID
                 if (is_array($responseSet)) {
                    // Check if $responseSet is the actual record or contains the record
                    // A simple heuristic: if it contains COLUMN_NICKNAME or COLUMN_SCORE as a key directly, it's likely the record.
                    // Otherwise, it might be an array like [ "response_id" => [ actual_data ] ]
                    if (isset($responseSet[COLUMN_NICKNAME]) || isset($responseSet[COLUMN_SCORE])) {
                        $rawEntriesData[] = $responseSet;
                    } else {
                        // Handle cases like { "responses": [ { "1": { record } }, { "2": { record } } ] }
                        foreach($responseSet as $responseRecord) {
                            if (is_array($responseRecord)) {
                                $rawEntriesData[] = $responseRecord;
                            }
                        }
                    }
                }
            }
        } elseif (is_array($responseData) && !empty($responseData) && isset($responseData[0])) {
             // Flat structure: [ { "id": "1", "col": "val" }, ... ]
             // This is less common for 'export_responses' JSON but good to handle.
            $rawEntriesData = $responseData;
        } elseif (empty($responseData['responses']) && isset($responseData['status']) && is_string($responseData['status'])) {
            // LimeSurvey might return a status message if no responses match, e.g. { "status": "No Data" }
             $errorMessage = 'No survey responses found in LimeSurvey. (Status: ' . htmlspecialchars($responseData['status']) . ')';
        } else {
            error_log("Unrecognised response data format from LimeSurvey. JSON data: " . substr($jsonData, 0, 1000));
            throw new RuntimeException('Unrecognised response data format from LimeSurvey.');
        }


        // -----------------------------------------------------------------
        // 6. BUILD LEADERBOARD
        // -----------------------------------------------------------------
        if (!empty($rawEntriesData)) {
            foreach ($rawEntriesData as $row) {
                // Ensure $row is an array before trying to access keys
                if (!is_array($row)) continue;

                $nickname = isset($row[COLUMN_NICKNAME]) && is_scalar($row[COLUMN_NICKNAME]) ? trim((string)$row[COLUMN_NICKNAME]) : null;
                $score    = isset($row[COLUMN_SCORE]) && is_scalar($row[COLUMN_SCORE])    ? trim((string)$row[COLUMN_SCORE])    : null;

                if ($nickname !== null && $nickname !== '' && $score !== null && is_numeric($score)) {
                    $entries[] = [
                        'nickname' => htmlspecialchars($nickname, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8'),
                        'score'    => (int)$score, // Cast to integer for sorting and display
                    ];
                }
            }
        }


        if (empty($entries) && !empty($rawEntriesData) && !$errorMessage) {
            $errorMessage = 'Responses found, but none contained valid and complete nickname/score data. Please check your survey data and ensure the question codes in `config.php` (COLUMN_NICKNAME: `' . htmlspecialchars(COLUMN_NICKNAME) . '`, COLUMN_SCORE: `' . htmlspecialchars(COLUMN_SCORE) . '`) are correct and that these questions are being answered in the expected format.';
        } elseif (empty($entries) && empty($rawEntriesData) && !$errorMessage) {
            $errorMessage = 'No survey responses found or none matched the processing criteria.';
        }

        if (!empty($entries)) {
            usort($entries, function ($a, $b) {
                return $b['score'] <=> $a['score']; // PHP 7.0+ spaceship operator
            });
        }
    } finally {
        // ---------------------------------------------------------------------
        // 7. LOGOUT (ALWAYS EXECUTE)
        // ---------------------------------------------------------------------
        if (isset($sessionKey)) {
            try {
                call_limesurvey_api(LIMESURVEY_API_URL, [
                    'method' => 'release_session_key',
                    'params' => [$sessionKey],
                ]);
            } catch (Exception $logoutException) {
                // Log this but don't let it break the page display
                error_log('Warning: Failed to release LimeSurvey session key: ' . $logoutException->getMessage());
            }
        }
    }
} catch (InvalidArgumentException $e) {
    http_response_code(400); // Bad request due to config
    error_log('Leaderboard configuration error: ' . $e->getMessage());
    $errorMessage = 'Configuration error. Please check server logs. (Ref: ' . htmlspecialchars($e->getMessage()) . ')';
} catch (JsonException $e) { // PHP 7.3+ for JsonException
    http_response_code(500);
    error_log('Leaderboard JSON processing error: ' . $e->getMessage());
    $errorMessage = 'Data processing error (JSON). Please contact the administrator or check server logs.';
} catch (RuntimeException $e) {
    http_response_code(500); // Internal Server Error or Service Unavailable
    error_log('Leaderboard runtime error: ' . $e->getMessage());
    // Provide a more user-friendly message for common issues
    if (strpos($e->getMessage(), 'cURL error') !== false || strpos($e->getMessage(), 'HTTP server error') !== false) {
        $errorMessage = 'Failed to connect to the survey server. Please try again later.';
    } elseif (strpos($e->getMessage(), 'LimeSurvey API error: Status: Invalid session key') !== false) {
        $errorMessage = 'Session with survey server expired or was invalid. Please refresh.';
    } else {
        $errorMessage = 'Failed to retrieve or process data. Try again later. (Details logged by server)';
    }
    // Log the specific part of the message for admin, but not too much to user
    $errorMessage .= '';

} catch (Exception $e) { // Catch any other unexpected exceptions
    http_response_code(500);
    error_log('Unexpected leaderboard error: ' . $e->getMessage() . ' Trace: ' . $e->getTraceAsString());
    $errorMessage = 'An unexpected error occurred. Please contact support or check server logs.';
}

// -----------------------------------------------------------------------------
// TEXT STRINGS (can be overridden by defining them in config.php or via environment variables)
// -----------------------------------------------------------------------------
$leaderboardTitle  = defined('LEADERBOARD_TITLE')  ? htmlspecialchars(LEADERBOARD_TITLE)  : 'Live Leaderboard';
$searchPlaceholder = defined('SEARCH_PLACEHOLDER') ? htmlspecialchars(SEARCH_PLACEHOLDER) : 'Search by nickname...';
$noResultsMessage  = defined('NO_RESULTS_MESSAGE') ? htmlspecialchars(NO_RESULTS_MESSAGE) : 'No nickname found matching your search.';
$pointsSuffix      = defined('POINTS_SUFFIX')      ? htmlspecialchars(POINTS_SUFFIX)      : 'points';
$noScoresMessage   = defined('NO_SCORES_MESSAGE')  ? htmlspecialchars(NO_SCORES_MESSAGE)  : 'No valid scores to display yet.';

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?= $leaderboardTitle ?></title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background-color: #f0f4f8; margin: 0; padding: 20px; color: #333; line-height: 1.6; }
        .container { max-width: 700px; margin: 20px auto; background-color: #fff; padding: 20px 30px; border-radius: 12px; box-shadow: 0 6px 18px rgba(0,0,0,0.1); }
        h1 { margin-top: 0; margin-bottom: 25px; text-align: center; font-size: 2.3em; color: #2c3e50; font-weight: 600; }
        #search { display: block; width: 100%; margin: 0 auto 25px; padding: 12px 18px; font-size: 1.05em; border: 1px solid #d1d9e0; border-radius: 8px; box-sizing: border-box; transition: border-color 0.2s, box-shadow 0.2s; }
        #search:focus { border-color: #007bff; outline: 0; box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25); }
        ol#leaderboard { padding: 0; list-style: none; margin:0; }
        #leaderboard li { background-color: #fdfdfd; margin-bottom: 12px; padding: 15px 20px; border-radius: 8px; border: 1px solid #e9edf0; display: flex; justify-content: space-between; align-items: center; transition: background-color 0.2s, transform 0.15s, box-shadow 0.15s; }
        #leaderboard li:hover { transform: translateY(-2px); box-shadow: 0 4px 10px rgba(0,0,0,0.08); }
        #leaderboard li:nth-child(1) { background-color: #fff8e1; border-left: 6px solid #ffd54f; } /* Gold */
        #leaderboard li:nth-child(2) { background-color: #f5f5f5; border-left: 6px solid #c0c0c0; } /* Silver */
        #leaderboard li:nth-child(3) { background-color: #fff0e6; border-left: 6px solid #cd7f32; } /* Bronze */
        #leaderboard li .rank-medal { font-size: 1.6em; margin-right: 18px; min-width: 40px; text-align: center; color: #555; }
        #leaderboard li .nickname { font-weight: 500; color: #343a40; flex-grow: 1; padding-right: 15px; word-break: break-word; }
        #leaderboard li .score { font-weight: 700; font-size: 1.15em; color: #0056b3; white-space: nowrap; }
        #leaderboard li.highlight { background-color: #e6f7ff !important; border-color: #91d5ff !important; transform: scale(1.01); }
        .status-message { background-color: #e9ecef; color: #495057; padding: 15px 20px; border-radius: 8px; margin-top: 20px; margin-bottom: 20px; text-align: center; border: 1px solid #ced4da; }
        .error-message { background-color: #f8d7da; color: #721c24; border-color: #f5c6cb; }
        #no-results-message { display: none; /* Shown by JS */ }
    </style>
</head>
<body>
    <div class="container">
        <h1><?= $leaderboardTitle ?></h1>

        <?php if ($errorMessage): ?>
            <div class="status-message error-message"><?= $errorMessage /* errorMessage already contains htmlspecialchars where needed for dynamic parts */ ?></div>
        <?php endif; ?>

        <?php if (!$errorMessage && !empty($entries)): ?>
            <input type="text" id="search" placeholder="<?= $searchPlaceholder ?>" aria-label="Filter leaderboard by nickname">
            <ol id="leaderboard">
                <?php foreach ($entries as $index => $entry):
                    $rank = $index + 1;
                    $medal = '';
                    if ($rank === 1) { $medal = '🥇'; }
                    elseif ($rank === 2) { $medal = '🥈'; }
                    elseif ($rank === 3) { $medal = '🥉'; }
                    else { $medal = '#' . $rank; }
                ?>
                <li>
                    <span class="rank-medal"><?= $medal ?></span>
                    <span class="nickname"><?= $entry['nickname'] // Already htmlspecialchar'd during processing ?></span>
                    <span class="score"><?= $entry['score'] ?> <?= $pointsSuffix ?></span>
                </li>
                <?php endforeach; ?>
            </ol>
            <p id="no-results-message" class="status-message" style="display:none;"><?= $noResultsMessage ?></p>
        <?php elseif (!$errorMessage && empty($entries)): ?>
            <p class="status-message"><?= $noScoresMessage ?></p>
        <?php endif; ?>
    </div>

    <?php if (!$errorMessage && !empty($entries)): ?>
    <script>
        (function () {
            var searchInput = document.getElementById('search');
            var leaderboardOl = document.getElementById('leaderboard');
            var noResultsP = document.getElementById('no-results-message');
            if (!searchInput || !leaderboardOl || !noResultsP) return;

            var items = leaderboardOl.getElementsByTagName('li');
            var debounceTimer;

            searchInput.addEventListener('input', function () {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(filterList, 200); // Adjusted debounce time
            });

            function filterList() {
                var query = searchInput.value.toLowerCase().trim();
                var visibleCount = 0;
                for (var i = 0; i < items.length; i++) {
                    var item = items[i];
                    var nicknameEl = item.querySelector('.nickname');
                    if (!nicknameEl) continue;

                    var nicknameText = nicknameEl.textContent.toLowerCase();
                    var isMatch = nicknameText.includes(query);
                    
                    item.style.display = isMatch ? '' : 'none';
                    item.classList.toggle('highlight', isMatch && query !== '');
                    if (isMatch) {
                        visibleCount++;
                    }
                }
                noResultsP.style.display = (query !== '' && visibleCount === 0) ? 'block' : 'none';
            }
        })();
    </script>
    <?php endif; ?>
</body>
</html>
